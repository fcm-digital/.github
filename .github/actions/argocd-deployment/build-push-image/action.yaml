---
name: 'Build & Push Docker image'
description: 'Build and Push Docker image using default tags'
inputs:
  app_name:
    description: 'Name of the app to deploy.'
    required: true
  artifact_region:
    description: 'Region or zone for Google Artifact Registry.'
    required: false
    default: 'europe'
  artifact_repository_name:
    description: 'Name of the repo to upload image: ${url}/${repo}/${app}.'
    required: false
  branch_name:
    description: 'Current branch name.'
    required: true
  build_args:
    description: 'Build arguments for the docker image.'
    required: false
  cache_type:
    description: 'Enable cache for docker building (Available options: none, inline, registry & stage-and-registry)'
    required: false
    default: 'inline'
  commit:
    description: 'The commit Id.'
    required: true
  commit_at:
    description: 'The time where the commit was created.'
    required: true
  context:
    description: 'Context to build image (default: ./).'
    required: false
    default: './'
  file:
    description: 'Path to Dockerfile.'
    required: false
    default: 'Dockerfile'
  image_tag:
    description: 'Tags for the docker image.'
    required: true
  pull:
    description: 'Whether to pull image from registry for cache building.'
    required: false
    default: 'false'
  push:
    description: 'Whether to push image to registry, or build locally.'
    required: false
    default: 'true'
  target:
    description: 'Sets the target stage to build.'
    required: false


runs:
  using: 'composite'
  steps:
    - id: set-docker-build-vars
      name: Set Docker Build Variables
      run: |-
        if [[ -z "${{ inputs.artifact_repository_name }}" ]]; then
            echo "REPO_URL=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.app_name }}/${{ inputs.app_name }}" >> $GITHUB_ENV
            if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
                echo "REPO_URL_STAGE=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.app_name }}-${{ inputs.target }}/${{ inputs.app_name }}-${{ inputs.target }}" >> $GITHUB_ENV
            fi
        else
            echo "REPO_URL=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.artifact_repository_name }}/${{ inputs.app_name }}" >> $GITHUB_ENV
            if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
                echo "REPO_URL_STAGE=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.artifact_repository_name }}-${{ inputs.target }}/${{ inputs.app_name }}-${{ inputs.target }}" >> $GITHUB_ENV
            fi
        fi

        echo "build_args_env<<EOF" >> $GITHUB_ENV

        if [[ -z "$GITHUB_ACTOR" ]]; then
            echo "USER_BUILDER=ArgoCD-Unknown-User" >> $GITHUB_ENV
        else
            echo "USER_BUILDER=${GITHUB_ACTOR}" >> $GITHUB_ENV
        fi

        echo "APP_REVISION=${{ inputs.image_tag }}" >> $GITHUB_ENV
        echo "BRANCH=${{ inputs.branch_name }}" >> $GITHUB_ENV
        echo "COMMIT_SHA=${{ inputs.commit }}" >> $GITHUB_ENV
        echo "COMMIT_AT=${{ inputs.commit_at }}" >> $GITHUB_ENV

        for build_arg in $(echo ${{ inputs.build_args }} | tr -d '[:space:][:blank:]' | tr ',' '\n'); do
            echo "${build_arg}" >> $GITHUB_ENV
        done

        echo "EOF" >> $GITHUB_ENV

      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - id: inline-cache-staging
      name: "(INLINE CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'inline' &&
          (inputs.branch_name != 'master' && inputs.branch_name != 'main')
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}
          type=registry,ref=${{ env.REPO_URL }}:latest
        cache-to: type=inline
        context: ${{ inputs.context }}
        tags: |
          ${{ env.REPO_URL }}:${{ inputs.branch_name }}
          ${{ env.REPO_URL }}:${{ inputs.image_tag }}

    - id: inline-cache-prod
      name: "(INLINE CACHE - PROD) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'inline' &&
          (inputs.branch_name == 'master' || inputs.branch_name == 'main')
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          type=registry,ref=${{ env.REPO_URL }}:latest
        cache-to: type=inline
        context: ${{ inputs.context }}
        tags: |
          ${{ env.REPO_URL }}:${{ inputs.branch_name }}
          ${{ env.REPO_URL }}:${{ inputs.image_tag }}
          ${{ env.REPO_URL }}:latest

    - id: stage-cache-staging
      name: "(STAGE CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'stage-and-registry' && inputs.target != '' &&
          (inputs.branch_name != 'master' && inputs.branch_name != 'main')
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache
          type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache
        cache-to: |
          type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache,mode=max
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
        tags: |
          ${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}

    # - id: stage-cache-prod
    #   name: "(STAGE CACHE - PROD) Pull, Build & Push Docker image [branch tag] + [image tag]"
    #   uses: docker/build-push-action@v5
    #   if: inputs.cache_type == 'stage-and-registry' && inputs.target != '' &&
    #       (inputs.branch_name == 'master' || inputs.branch_name == 'main')
    #   with:
    #     push: ${{ inputs.push }}
    #     pull: ${{ inputs.pull }}
    #     file: ${{ inputs.file }}
    #     build-args: |
    #       ${{ env.build_args_env }}
    #     cache-from: |
    #       type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache
    #     cache-to: |
    #       type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache,mode=max
    #     context: ${{ inputs.context }}
    #     target: ${{ inputs.target }}
    #     tags: |
    #       ${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}
    #       ${{ env.REPO_URL_STAGE }}:latest

    - id: registry-cache-staging
      name: "(REGISTRY CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'registry' ||
          (inputs.cache_type == 'stage-and-registry' && inputs.target != '' && steps.stage-cache-staging.outcome == 'success') &&
          (inputs.branch_name != 'master' && inputs.branch_name != 'main')
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache
          type=registry,ref=${{ env.REPO_URL }}:latest-cache
          type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache
          type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}-cache
        cache-to: |
          type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}-cache,mode=max
        context: ${{ inputs.context }}
        tags: |
          ${{ env.REPO_URL }}:${{ inputs.branch_name }}
          ${{ env.REPO_URL }}:${{ inputs.image_tag }}

    # - id: registry-cache-prod
    #   name: "(REGISTRY CACHE - PROD) Pull, Build & Push Docker image [branch tag] + [image tag]"
    #   uses: docker/build-push-action@v5
    #   if: (inputs.cache_type == 'registry' ||
    #       (inputs.cache_type == 'stage-and-registry' && inputs.target != '' && steps.stage-cache-prod.outcome == 'success')) &&
    #       (inputs.branch_name == 'master' || inputs.branch_name == 'main')
    #   with:
    #     push: ${{ inputs.push }}
    #     pull: ${{ inputs.pull }}
    #     file: ${{ inputs.file }}
    #     build-args: |
    #       ${{ env.build_args_env }}
    #     cache-from: |
    #       type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache
    #       type=registry,ref=${{ env.REPO_URL }}:latest-cache
    #     cache-to: |
    #       type=registry,ref=${{ env.REPO_URL }}:latest-cache,mode=max
    #     context: ${{ inputs.context }}
    #     tags: |
    #       ${{ env.REPO_URL }}:${{ inputs.branch_name }}
    #       ${{ env.REPO_URL }}:${{ inputs.image_tag }}
    #       ${{ env.REPO_URL }}:latest
