---
name: 'Build & Push Docker image'
description: 'Build and Push Docker image using default tags'
inputs:
  app_name:
    description: 'Name of the app to deploy.'
    required: true
  artifact_region:
    description: 'Region or zone for Google Artifact Registry.'
    required: false
    default: 'europe'
  artifact_repository_name:
    description: 'Name of the repo to upload image: ${url}/${repo}/${app}.'
    required: false
  branch_name:
    description: 'Current branch name.'
    required: true
  build_args:
    description: 'Build arguments for the docker image.'
    required: false
  cache_type:
    description: 'Enable cache for docker building (Available options: none, inline, registry & stage-and-registry)'
    required: false
    default: 'inline'
  commit:
    description: 'The commit Id.'
    required: true
  commit_at:
    description: 'The time where the commit was created.'
    required: true
  context:
    description: 'Context to build image (default: ./).'
    required: false
    default: './'
  file:
    description: 'Path to Dockerfile.'
    required: false
    default: 'Dockerfile'
  image_tag:
    description: 'Tags for the docker image.'
    required: true
  pull:
    description: 'Whether to pull image from registry for cache building.'
    required: false
    default: 'false'
  push:
    description: 'Whether to push image to registry, or build locally.'
    required: false
    default: 'true'
  target:
    description: 'Sets the target stage to build.'
    required: false


runs:
  using: 'composite'
  steps:
    - run: |-
        if [[ -z "${{ inputs.artifact_repository_name }}" ]]; then
          echo "REPO_URL=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.app_name }}/${{ inputs.app_name }}" >> $GITHUB_ENV
          if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
            echo "REPO_URL_STAGE=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.app_name }}-${{ inputs.target }}/${{ inputs.app_name }}-${{ inputs.target }}" >> $GITHUB_ENV
          fi
        else
          echo "REPO_URL=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.artifact_repository_name }}/${{ inputs.app_name }}" >> $GITHUB_ENV
          if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
            echo "REPO_URL_STAGE=${{ inputs.artifact_region }}-docker.pkg.dev/fcm-platform-artifacts-ceba/${{ inputs.artifact_repository_name }}-${{ inputs.target }}/${{ inputs.app_name }}-${{ inputs.target }}" >> $GITHUB_ENV
          fi
        fi

        #! Set up docker-build 'CACHE_FROM'
        echo "cache_from_env<<EOF" >> $GITHUB_ENV

        if [[ "${{ inputs.cache_type }}" == "registry" ]]; then
          #* 'REGISTRY CACHE' and 'PROD' env -> 'latest-cache'
          if [[ "${{ inputs.branch_name }}" == 'master' || "${{ inputs.branch_name }}" == 'main' ]]; then
            echo "type=registry,ref=${{ env.REPO_URL }}:latest-cache" >> $GITHUB_ENV
          #* 'REGISTRY CACHE' and 'STAGING' env -> 'latest-cache' and 'branch-cache'
          else
            echo "type=registry,ref=${{ env.REPO_URL }}:latest-cache" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}-cache" >> $GITHUB_ENV
          fi

        elif [[ "${{ inputs.cache_type }}" == "stage-and-registry" ]]; then
          #* 'STAGE-AND-REGISTRY CACHE' and 'PROD' env -> 'latest-cache' and 'stage-latest-cache'
          if [[ "${{ inputs.branch_name }}" == 'master' || "${{ inputs.branch_name }}" == 'main' ]]; then
            echo "type=registry,ref=${{ env.REPO_URL }}:latest-cache" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache" >> $GITHUB_ENV
          #* 'STAGE-AND-REGISTRY CACHE' and 'STAGING' env -> 'latest-cache', 'stage-latest-cache', 'branch-cache' and 'stage-branch-cache'
          else
            echo "type=registry,ref=${{ env.REPO_URL }}:latest-cache" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}-cache" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:latest" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache" >> $GITHUB_ENV
          fi
        fi

        echo "EOF" >> $GITHUB_ENV

        #! Set up docker-build 'STAGE_CACHE_FROM'
        echo "stage_cache_from_env<<EOF" >> $GITHUB_ENV

        if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
          #* 'STAGE-AND-REGISTRY CACHE' and 'PROD' env -> 'latest-cache'
          if [[ "${{ inputs.branch_name }}" == 'master' || "${{ inputs.branch_name }}" == 'main' ]]; then
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache" >> $GITHUB_ENV
          #* 'STAGE-AND-REGISTRY CACHE' and 'STAGING' env -> 'latest-cache' and 'branch-cache'
          else
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache" >> $GITHUB_ENV
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache" >> $GITHUB_ENV
          fi
        fi

        echo "EOF" >> $GITHUB_ENV

        #! Set up docker-build 'CACHE_TO'

        if [[ "${{ inputs.cache_type }}" == "registry" || "${{ inputs.cache_type }}" == "stage-and-registry" ]]; then
          echo "cache_to_env<<EOF" >> $GITHUB_ENV
          
          #* 'REGISTRY CACHE' or 'STAGE-AND-REGISTRY-CACHE' and 'PROD' env -> 'latest-cache'
          if [[ "${{ inputs.branch_name }}" == 'master' || "${{ inputs.branch_name }}" == 'main' ]]; then
            echo "type=registry,ref=${{ env.REPO_URL }}:latest-cache,mode=max" >> $GITHUB_ENV
          #* 'REGISTRY CACHE' or 'STAGE-AND-REGISTRY-CACHE' and 'STAGING' env -> 'branch-cache'
          else
            echo "type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}-cache,mode=max" >> $GITHUB_ENV
          fi

          echo "EOF" >> $GITHUB_ENV
        fi

        #! Set up docker-build 'STAGE_CACHE_TO'

        if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
          echo "stage_cache_to_env<<EOF" >> $GITHUB_ENV

          #* 'STAGE-AND-REGISTRY CACHE' and 'PROD' env -> 'latest-cache'
          if [[ "${{ inputs.branch_name }}" == 'master' || "${{ inputs.branch_name }}" == 'main' ]]; then
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:latest-cache,mode=max" >> $GITHUB_ENV
          #* 'STAGE-AND-REGISTRY CACHE' and 'STAGING' env -> 'branch-cache'
          else
            echo "type=registry,ref=${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}-cache,mode=max" >> $GITHUB_ENV
          fi

          echo "EOF" >> $GITHUB_ENV
        fi


        #! Set up docker-build 'BUILD ARGS'

        echo "build_args_env<<EOF" >> $GITHUB_ENV

        if [[ -z "$GITHUB_ACTOR" ]]; then
          echo "USER_BUILDER=ArgoCD-Unknown-User" >> $GITHUB_ENV
        else
          echo "USER_BUILDER=${GITHUB_ACTOR}" >> $GITHUB_ENV
        fi

        echo "APP_REVISION=${{ inputs.image_tag }}" >> $GITHUB_ENV
        echo "BRANCH=${{ inputs.branch_name }}" >> $GITHUB_ENV
        echo "COMMIT_SHA=${{ inputs.commit }}" >> $GITHUB_ENV
        echo "COMMIT_AT=${{ inputs.commit_at }}" >> $GITHUB_ENV

        for build_arg in $(echo ${{ inputs.build_args }} | tr -d '[:space:][:blank:]' | tr ',' '\n'); do
          echo "${build_arg}" >> $GITHUB_ENV
        done

        echo "EOF" >> $GITHUB_ENV

        #! Set up docker-build 'TAGS'
        echo "tags_env<<EOF" >> $GITHUB_ENV

        echo "${{ env.REPO_URL }}:${{ inputs.branch_name }}" >> $GITHUB_ENV
        echo "${{ env.REPO_URL }}:${{ inputs.image_tag }}" >> $GITHUB_ENV

        if [[ inputs.branch_name == 'master' || inputs.branch_name == 'main' ]]; then
          echo "${{ env.REPO_URL }}:latest" >> $GITHUB_ENV
        fi

        echo "EOF" >> $GITHUB_ENV

        #! Set up docker-build 'STAGE_TAGS'
        if [[ "${{ inputs.cache_type }}" == "stage-and-registry" && "${{ inputs.target }}" != "" ]]; then
          echo "tags_stage_env<<EOF" >> $GITHUB_ENV

          echo "${{ env.REPO_URL_STAGE }}:${{ inputs.branch_name }}" >> $GITHUB_ENV

          if [[ inputs.branch_name == 'master' || inputs.branch_name == 'main' ]]; then
            echo "${{ env.REPO_URL_STAGE }}:latest" >> $GITHUB_ENV
          fi
          echo "EOF" >> $GITHUB_ENV
        fi

      shell: bash

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - id: no-cache
      name: "(NO CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'none'
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        context: ${{ inputs.context }}
        tags: |
          ${{ env.tags_env }}

    - id: inline-cache
      name: "(INLINE CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'inline'
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: type=registry,ref=${{ env.REPO_URL }}:${{ inputs.branch_name }}
        cache-to: type=inline
        context: ${{ inputs.context }}
        tags: |
          ${{ env.tags_env }}

    - id: stage-cache
      name: "(STAGE CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: inputs.cache_type == 'stage-and-registry' && inputs.target != ""
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          ${{ env.stage_cache_from_env }}
        cache-to: |
          ${{ env.stage_cache_to_env }}
        context: ${{ inputs.context }}
        target: ${{ inputs.target }}
        tags: |
          ${{ env.tags_stage_env }}

    - id: registry-cache
      name: "(REGISTRY CACHE) Pull, Build & Push Docker image [branch tag] + [image tag]"
      uses: docker/build-push-action@v5
      if: (inputs.cache_type == 'registry' || 
          (inputs.cache_type == 'stage-and-build' && inputs.target != "" && steps.stage-cache.outcome == 'success')
      with:
        push: ${{ inputs.push }}
        pull: ${{ inputs.pull }}
        file: ${{ inputs.file }}
        build-args: |
          ${{ env.build_args_env }}
        cache-from: |
          ${{ env.cache_from_env }}
        cache-to: |
          ${{ env.cache_to_env }}
        context: ${{ inputs.context }}
        tags: |
          ${{ env.tags_env }}
