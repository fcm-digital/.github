---
name: 'Kube-Linter'
description: 'Kube Linter Execution for Helm Chart Templates.'

inputs:
  app_name:
    description: 'The application name that will be deployed.'
    required: true
  branch_name:
    description: 'Current branch name.'
    required: true
  env_to_deploy:
    description: 'Environment where the image will be deployed.'
    required: true
  exclude_rules:
    description: 'The kube-linter rules to be excluded.'
    required: false
  image_tag:
    description: 'The image tag that will be deployed.'
    required: true
  go_version:
    description: 'Go Version'
    required: false
    default: '1.20'
  helm_version:
    description: 'Helm Version'
    required: false
    default: 'v3.12.1'
  kube_linter_version:
    description: 'Kube Linter Version'
    required: false
    default: 'v0.6.2'

runs:
  using: "composite"
  steps:
    - id: install-go
      name: 'GO Installation'
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
        cache: false

    - id: install-helm
      name: 'Helm Installation'
      uses: azure/setup-helm@v3
      with:
        version: ${{ inputs.helm_version }} # Current Helm version installed into ArgoCD Pods.
        # token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'

    - id: install-kube-linter
      name: 'Kube-Linter Installation'
      shell: bash
      run: |
        go version
        go install golang.stackrox.io/kube-linter/cmd/kube-linter@${{ inputs.kube_linter_version }}

    - id: helm-template-staging
      name: 'Helm Template for Staging'
      if: inputs.branch_name != 'master' && inputs.branch_name != 'main'
      shell: bash
      run: |
        cd kube/values/${{ inputs.app_name }/staging

        HELM_VALUES=""
        while IFS= read -r -d '' file; do
          HELM_VALUES+="-f \"$file\" "
        done < <(find ./${{ inputs.env_to_deploy }} -type f -name '*.yaml' -print0)

        while IFS= read -r -d '' file; do
          HELM_VALUES+="-f \"$file\" "
        done < <(find . -maxdepth 1 -type f -name '*.yaml' -print0)

        helm template . --name-template=${{ inputs.app_name }} --namespace=${{ inputs.env_to_deploy }} \"
          --set currentTag=${{ inputs.image_tag }} $HELM_VALUES > output-template.yaml

        kube-linter lint output-template.yaml --exclude non-existent-service-account ${{ inputs.exclude_rules }}

    - id: helm-template-production
      name: 'Helm Template for Production'
      if: inputs.env_to_deploy == 'prod' && (inputs.branch_name == 'master' || inputs.branch_name == 'main')
      shell: bash
      run: |
        cd kube/values/${{ inputs.app_name }/prod

        while IFS= read -r -d '' file; do
          HELM_VALUES+="-f \"$file\" "
        done < <(find "$VALUES_ENVIRONMENT" -type f -name '*.yaml' -print0)

        helm template . --name-template=${{ inputs.app_name }} --namespace=${{ inputs.env_to_deploy }} \"
          --set currentTag=${{ inputs.image_tag }} $HELM_VALUES > output-template.yaml

        kube-linter lint output-template.yaml --exclude non-existent-service-account ${{ inputs.exclude_rules }}